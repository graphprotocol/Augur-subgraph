
#Augur Events
#- from this I am going to distingushes Types, and what contract they are associated with. this might kind of look like a schema
#- Sets (Augur.sol)
#- Dispute Crowdsourcer (Augur.sol)
#- Fee Window (Augur.sol)
#- InitialReporter(Augur.sol)
#- Market(Augur.sol)
#- Mint and Burn (VariableSupplyToken.sol)
#- TokensBurned, TokensMinted, TokensTransferred (Augur.sol)
#- Order(Augur.sol)
#- TradingProceedsClaimed(Augur.sol)
#- Universe (Augur.sol)
#- note there are only a few contracts here
#- ERC20Basic.sol (Transfer, Approval)
#- Augur.sol
#- VariableSupplyToken.sol

# Unused Events - Approval, Transfer (ERC20)
# Events I'm not sure how to put in a schema yet - EscapeHatchChanged, ReportingParticipantDisavowed, TimestampSet, TradingProceedsClaimed


# Events - MarketCreated, MarketFinalized, MarketMigrated, MarketMailboxTransferred, MarketParticipantsDisavowed, MarketTransferred
type Market @entity {
    # event MarketCreated 
    id: ID! # address market
    topic: Bytes!
    description: String # I think its not required
    extraInfo: String 
    universe: Bytes! # an address
    marketCreator: Bytes!
    outcomes: [Bytes!]! # Might be a special way to handle this, see dharma
    marketCreationFee: BigInt
    minPrice: BigInt
    maxPrice: BigInt
}

# Events - InitialReportSubmitted, Initial Reporter Redeemed
type InitialReport @entity {
    # event InitialReportSubmitted
    id: ID! # address market
    universe: Bytes!
    reporter: Bytes!
    amountStaked: BigInt!
    isDesignatedReported: Bool # false null bug, no !
    payoutNumerators: [BigInt!]! # see dharma
    description: String

    #event InitialReporterRedeemed 
    amountRedeemed: BigInt!
    repReceived: BigInt!
    
}

# Events - DisputeCrowdsourcerCompleted, DisputeCrowdsourcerContribution, DisputeCrowdsourcerCreated, DisputeCrowdSourcerRedeemed
type DisputeCrowdsourcer @entity {
    # event DisputeCrowdsourcerCreated
    id: ID! # address market
    universe: Bytes!
    disputeCrowdsourcer: Bytes!
    payoutNumerators: [BigInt!]! # see dharma
    size: BigInt

    # event DisputeCrowdsourcerContribution
    # need to decide to make these arrays or their own entites, as they are multiple contibutors to a dispute
    reporters: [Bytes!]! # from event Contribution
    amountStaked: [BigInt!]!
    description: [String!]!

    # event DisputeCrowdsourcerCompleted
    completed: Boolean # this gets triggered true when event Completed is done 

    # event DisputeCrowdsourcedRedeemed
    amountRedeemed: [BigInt!]! #event Redeemed
    repReceived: [BigInt!]! #event Redeemed
    # payout numerators again, prob just update it, from event reedemed
}

# Events - CompleteSetsPurchased, CompleteSetsSold
type Sets @entity {
    id: ID!
}



# Events - FeeWindowCreated, FeeWindowRedeemed
type FeeWindow @entity {
    id: ID!
}

# Events - InitialReporterRedeemed, , InitialreporterTransferred
type InitialReporter @entity {
    id: ID!
}

# Events - mint and burn from VariableSupplyToken. And 0xd5524179cb7ae012f5b642c1d6d700bbaa76b96b is the address
type Cash @entity {
    id: ID!
}

# Events - TokensBurned, TokensMinted, TokensTransferred
type Tokens @entity {
    id: ID!
}

# Events - OrderCanceled, OrderCreated, OrderFilled,
type Order @entity {
    id: ID!
}

# Events - UniverseCreated, UniverseForked
type Universe @entity {
    id: ID!
}
